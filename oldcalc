package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {

	r := bufio.NewReader(os.Stdin)

	var numbers []int

	fmt.Println("Enter nums with 'add' and then use calc commands:")
	fmt.Println("inc, acc, sub, mul, div, mod, show, exit")

	for {
		str, err := r.ReadString('\n')
		if err != nil {
			panic(err)
		}
		str = strings.TrimSpace(str)

		if str == "exit" {
			break
		}

		// str to slice; separate each word by " " to get command lines
		strSlice := strings.Split(str, " ")

		// command (add, inc, etc)
		cmd := strSlice[0]
		// numerical args
		args := []int{}

		for _, val := range strSlice[1:] {
			num, err := strconv.Atoi(val)
			if err != nil {
				panic(err)
			}
			args = append(args, num)
		}

		if cmd == "add" {
			numbers = append(numbers, args...)
			fmt.Println("Operands:", strings.Trim(fmt.Sprint(numbers), "[]"))
		} else if cmd == "show" {
			fmt.Println("Operands: ", numbers)
			// operations
		} else if args[0] >= len(numbers) {
			fmt.Println("Wrong index")
		} else if cmd == "inc" {
			numbers[args[0]]++
			fmt.Println(numbers)
		} else if len(args) < 2 {
			fmt.Println("Should be 2 args") // fix `add 1 2` -> `acc 1` panic
		} else {
			switch cmd {
			case "acc":
				numbers[args[0]] += args[1]
			case "sub":
				numbers[args[0]] -= args[1]
			case "mul":
				numbers[args[0]] *= args[1]
			case "div":
				if args[1] == 0 {
					fmt.Println("Don't divide by 0")
				} else {
					numbers[args[0]] /= args[1]
				}
			case "mod":
				numbers[args[0]] %= args[1]
			default:
				fmt.Println("Enter valid command")
			}
			fmt.Println(numbers)
		}
	}
}





==========================================================================================
==========================================================================================\


import (
	"bufio"
	"errors"
	"fmt"
	"os"
	"strconv"
	"strings"
)

func parseArgs(c []string) (float64, float64, error) {
	num1, err := strconv.ParseFloat(c[0], 64)
	if err != nil {
		return 0.0, 0.0, err
	}
	num2, err := strconv.ParseFloat(c[2], 64)
	if err != nil {
		return 0.0, 0.0, err
	}
	return num1, num2, nil
}

func processStack(e []string) (float64, error) {
	result := 0.0
	for _, v := range e {
		c := strings.Split(v, " ")
		if len(c)-1 < 2 {
			return 0.0, errors.New("error: some arguments are not supplied")
		}
		num1, num2, err := parseArgs(c)
		if err != nil {
			return 0.0, err
		}
		switch c[1] {
		case "*":
			result = num1 * num2
		case "/":
			if num2 == 0.0 {
				return 0.0, errors.New("error: you tried to divide by zero.")
			}
			result = num1 / num2
		case "+":
			result = num1 + num2
		case "-":
			result = num1 - num2
		}
	}
	return result, nil
}

func main() {
	expressions := make([]string, 1)
	for {
		scanner := bufio.NewScanner(os.Stdin)
		fmt.Print("gocalc>")
		for scanner.Scan() {
			expressions = append(expressions, scanner.Text())
			res, err := processStack(expressions)
			if err != nil {
				fmt.Println(err)
			} else {
				fmt.Println(res)
			}
			fmt.Print("gocalc>")
		}
	}
}

